habitat_baselines:
  verbose: False
  trainer_name: "ver"
  simulator_gpu_id: 0
  torch_gpu_id: 0
  video_option: ["disk"]
  tensorboard_dir: "tb"
  video_dir: "../rearrange_policies/nav/video_dir"
  video_fps: 30
  video_render_top_down: False
  video_render_all_info: True
  video_render_views:
    - "third_rgb_sensor"
  test_episode_count: -1
  eval_ckpt_path_dir: "../rearrange_policies/nav/checkpoints"
  num_environments: 4
  # Visual sensors to include
  sensors: ["head_depth_sensor"]
  #, 'head_rgb_sensor']
  checkpoint_folder: "../rearrange_policies/nav/checkpoints"
  num_updates: -1
  total_num_steps: 500_000_000.0
  log_interval: 10
  num_checkpoints: 50
  # Force PyTorch to be single threaded as
  # this improves performance considerably
  force_torch_single_threaded: True
  eval_keys_to_include_in_name: ['reward', 'force', 'success']
  writer_type: 'wb'

  base_task_config_path: habitat-lab/habitat/config/tasks/rearrange/nav_to_obj.yaml

  wb:
    project_name: 'habitat2.0'
    run_name: 'tt'
    group: 'tt'

  rl:
    policy:
        name: "PointNavResNetPolicy"
        action_distribution_type: "gaussian"
        action_dist:
           use_log_std: True

    ppo:
      # ppo params
      clip_param: 0.2
      ppo_epoch: 3
      num_mini_batch: 2
      value_loss_coef: 0.5
      entropy_coef: 0.0001
      lr: 2.0e-4
      eps: 1.0e-5
      max_grad_norm: 0.2
      num_steps: 128
      use_gae: True
      gamma: 0.99
      tau: 0.95
      use_linear_clip_decay: False
      use_linear_lr_decay: False
      reward_window_size: 50
      use_cosine_decay_lr: true
      lr_cosine_decay_alpha: 1.0e-5

      use_normalized_advantage: False

      hidden_size: 512

      # Use double buffered sampling, typically helps
      # when environment time is similar or larger than
      # policy inference time during rollout generation
      use_double_buffered_sampler: False

    ddppo:
      sync_frac: 0.6
      # The PyTorch distributed backend to use
      distrib_backend: NCCL
      # Visual encoder backbone
      pretrained_weights: data/ddppo-models/gibson-2plus-resnet50.pth
      # Initialize with pretrained weights
      pretrained: False
      # Initialize just the visual encoder backbone with pretrained weights
      pretrained_encoder: False
      # Whether the visual encoder backbone will be trained.
      train_encoder: True
      # Whether to reset the critic linear layer
      reset_critic: True

      # Model parameters
      backbone: resnet50
      rnn_type: GRU
      num_recurrent_layers: 3
